# -*- coding: utf-8 -*-
"""tictactoe.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BeOhj25D8BcvGRw2fDw9VhA_bDdMRqaD
"""

import random

class TicTacToe:
  def __init__(self):
    self.board = [' '] * 9
    self.current_player = 'X'  # AI is X
    self.human_player = 'O'

  def print_board(self):
    print('   |   |')
    print(' ' + self.board[0] + ' | ' + self.board[1] + ' | ' + self.board[2])
    print('   |   |')
    print('-----------')
    print('   |   |')
    print(' ' + self.board[3] + ' | ' + self.board[4] + ' | ' + self.board[5])
    print('   |   |')
    print('-----------')
    print('   |   |')
    print(' ' + self.board[6] + ' | ' + self.board[7] + ' | ' + self.board[8])
    print('   |   |')

  def is_board_full(self):
    return all(cell != ' ' for cell in self.board)

  def check_win(self, player):
    win_conditions = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
        [0, 4, 8], [2, 4, 6]             # Diagonals
    ]
    for condition in win_conditions:
      if all(self.board[i] == player for i in condition):
        return True
    return False

  def get_empty_cells(self):
    return [i for i, cell in enumerate(self.board) if cell == ' ']

  def minimax(self, depth, maximizing_player):
    if self.check_win('X'):
        return 1
    elif self.check_win('O'):
        return -1
    elif self.is_board_full():
        return 0

    if maximizing_player:
        max_eval = -float('inf')
        for move in self.get_empty_cells():
            self.board[move] = 'X'
            eval = self.minimax(depth + 1, False)
            self.board[move] = ' '
            max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float('inf')
        for move in self.get_empty_cells():
            self.board[move] = 'O'
            eval = self.minimax(depth + 1, True)
            self.board[move] = ' '
            min_eval = min(min_eval, eval)
        return min_eval

  def find_best_move(self):
      best_move = -1
      best_eval = -float('inf')
      for move in self.get_empty_cells():
          self.board[move] = 'X'
          move_eval = self.minimax(0, False)
          self.board[move] = ' '
          if move_eval > best_eval:
              best_eval = move_eval
              best_move = move
      return best_move

  def ai_move(self):
    best_move = self.find_best_move()
    self.board[best_move] = 'X'

  def human_move(self):
    while True:
      try:
        move = int(input("Enter your move (1-9): ")) - 1
        if 0 <= move <= 8 and self.board[move] == ' ':
          self.board[move] = 'O'
          break
        else:
          print("Invalid move. Try again.")
      except ValueError:
        print("Invalid input. Please enter a number between 1 and 9.")

  def play(self):
    print("Welcome to Tic-Tac-Toe!")
    self.print_board()
    while True:
      self.ai_move()
      self.print_board()
      if self.check_win('X'):
        print("AI wins!")
        break
      if self.is_board_full():
        print("It's a tie!")
        break

      self.human_move()
      self.print_board()
      if self.check_win('O'):
        print("You win!")
        break
      if self.is_board_full():
        print("It's a tie!")
        break

if __name__ == "__main__":
  game = TicTacToe()
  game.play()